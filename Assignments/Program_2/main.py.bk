#!/usr/bin/env python3

""" Program 2 """

import csv
import logging
import os
import pprint as pp
import random
import re
import sys

import pygame

from dbscan import *

# GLOBALS
DIRPATH = os.path.dirname(os.path.realpath(__file__)) + '\\'
FILEPATHS = ['Nypd_Crime_01.csv']

TAGS = \
    'CMPLNT_NUM,CMPLNT_FR_DT,CMPLNT_FR_TM,CMPLNT_TO_DT,CMPLNT_TO_TM, RPT_DT,KY_CD,OFNS_DESC,PD_CD,PD_DESC,CRM_ATPT_CPTD_CD,LAW_CAT_CD,JURIS_DESC,BORO_NM,ADDR_PCT_CD,LOC_OF_OCCUR_DESC,PREM_TYP_DESC,PARKS_NM,HADEVELOPT,X_COORD_CD,Y_COORD_CD,Latitude,Longitude,Lat_Lon'.split(
        ',')

# Regex string that will validate record string
REGVALIDATE = \
    '^(\d{9}),([0|1]\d\/[0-3]\d\/[1-2]\d{3}),(\d{2}:\d{2}:\d{2}),([0|1]\d\/[0-3]\d\/[1-2]\d{3}),(\d{2}:\d{2}:\d{2}),([0|1]\d\/[0-3]\d\/[1-2]\d{3}),(\d{3}),([\w ]+),(\d{3}),(\"[\w, ]*\"),(\w+),(\w+),([\w|\.| ]+),([\w]+),(\d{1,3}),+([\w| _-]+)[(?:,)(.)]+,(\d{6,7}),(\d{6}),(-{0,1}\d{0,3}\.\d{9}),(-{0,1}\d{0,3}\.\d{9}),(\".*\")$'


class Logger:
    """
    This class will log output writting to screen or file as necessary
    """

    def __init__(self, logname=__name__, defaultlevel=logging.DEBUG):
        self.log = logging.getLogger(logname)
        self.log.setLevel(defaultlevel)
        formatter = logging.Formatter('[%(levelname)s] %(message)s')
        handler_stream = logging.StreamHandler()
        handler_stream.setFormatter(formatter)
        handler_stream.setLevel(logging.ERROR)
        self.log.addHandler(handler_stream)
        handler_file = logging.FileHandler(logname + '.log')
        handler_file.setFormatter(formatter)
        self.log.addHandler(handler_file)


class ValidateString:
    """
    This class will accept a list of strings and validate it
    """

    def __init__(self):
        self.warnlog = Logger("String_Validater", logging.WARN)
        self.debuglog = Logger("String_Validater", logging.DEBUG)

    def validate(self, input_string, regstring):
        # for idx, record in enumerate(input_strings):
        match = re.match(regstring, input_string)
        if match:
            return match
        else:
            return False


class Report:
    """
    Contains LIST of incidents in DICTIONARY form
    """

    def __init__(self, paths):

        self.records = []
        self.coords = []
        for path in paths:
            self.readData(path)
        # print(self.records['Lat_Lon'])

    def convertToNumeric(self, value):
        """
        Converts string to appropriate numeric Type.
        Its order of conversion is INT, FLOAT, TUPLE in that order.
        The TUPLE returns a FLOAT pair.
        """
        rstring = '^.*\((\d+\.\d+,[ -]*\d+.\d+).*$'
        try:
            return int(value)
        except:
            try:
                return float(value)
            except:
                try:
                    match = re.match(rstring, value)
                    lon_lat_split = match.group(1).split(',')
                    value = (
                        float(lon_lat_split[0]), float(lon_lat_split[1]))
                    return value
                except:
                    return value

    def readData(self, path):
        """
        Reads files containg data and stores them as incident records
        """
        numeric_tags = ['CMPLNT_NUM', 'KY_CD', 'PD_CD', 'ADDR_PCT_CD',
                        'ADDR_PCT_CD', 'X_COORD_CD', 'Y_COORD_CD', 'Latitude', 'Longitude']
        # read the data
        with open(DIRPATH + path) as csvfile:
            report = csv.DictReader(csvfile)
            for incident in report:
                for tag in incident:
                    incident[tag] = self.convertToNumeric(incident[tag])
                    # print(incident[tag], 'is of type', type(incident[tag]))
                self.coords.append(incident['Lat_Lon'])
                self.records.append(incident)
        print('len of x is {}\nlen of y is {}\n'.format(len(self.coords[]))
        return


def calculate_mbrs(points, epsilon, min_pts):
    """
    Find clusters using DBscan and then create a list of bounding rectangles
    to return.
    """
    mbrs = []
    clusters = dbscan(points, epsilon, min_pts)
    """
    Traditional dictionary iteration to populate mbr list
    Does same as below
    """
    # for id,cpoints in clusters.items():
    #     xs = []
    #     ys = []
    #     for p in cpoints:
    #         xs.append(p[0])
    #         ys.append(p[1])
    #     max_x = max(xs)
    #     max_y = max(ys)
    #     min_x = min(xs)
    #     min_y = min(ys)
    #     mbrs.append([(min_x,min_y),(max_x,min_y),(max_x,max_y),(min_x,max_y),(min_x,min_y)])
    # return mbrs

    """
    Using list index value to iterate over the clusters dictionary
    Does same as above
    """
    for id in range(len(clusters) - 1):
        xs = []
        ys = []
        for p in clusters[id]:
            xs.append(p[0])
            ys.append(p[1])
        max_x = max(xs)
        max_y = max(ys)
        min_x = min(xs)
        min_y = min(ys)
        mbrs.append([(min_x, min_y), (max_x, min_y),
                     (max_x, max_y), (min_x, max_y),
                     (min_x, min_y)])
    return mbrs


def clean_area(screen, origin, width, height, color):
    """
    Prints color rectangle to "erase" an area on the screen.
    Could be used to erase a small area, or the entire screen.
    """
    ox, oy = origin
    points = [(ox, oy), (ox + width, oy),
              (ox + width, oy + height),
              (ox, oy + height), (ox, oy)]

    pygame.draw.polygon(screen, color, points, 0)


def read_points(filenames):
    """
    Reads files and parses their (lat,long) pairs.
    Returns an array of dicts.
    """
    {

    }


if __name__ == "__main__":
    # set local variables
    background_colour = (255, 255, 255)
    black = (0, 0, 0)
    (width, height) = (600, 400)

    # initialize gygame
    screen = pygame.display.set_mode((width, height))
    pygame.display.set_caption('Program 2')
    screen.fill(background_colour)

    # update screen
    pygame.display.flip()

    # these vars control plot distribution
    epsilon = 20
    min_pts = 5.0

    points = []

    num_points = 500

    # # get points
    # for i in range(num_points):
    #     x = random.randint(10, width - 10)
    #     y = random.randint(10, height - 10)
    #     points.append((x, y))

    report = Report(FILEPATHS)
    mbrs = calculate_mbrs(report.coords[:num_points-1], epsilon, min_pts)

    running = True
    while running:

        # plot the points
        for p in points:
            pygame.draw.circle(screen, black, p, 3, 0)
        for mbr in mbrs:
            pygame.draw.polygon(screen, black, mbr, 2)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                clean_area(screen, (0, 0), width, height, (255, 255, 255))
                points.append(event.pos)
        pygame.display.flip()


__copyright__ = "Copyright 2017"
__version__ = "1.0.1"
__maintainer__ = "Christian Norfleet"
__email__ = "http://contact@deadlycheerio.com"
__repo__ = "https://github.com/cynorfleet/REPONAME"
